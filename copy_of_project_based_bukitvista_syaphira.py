# -*- coding: utf-8 -*-
"""Copy of Project Based Bukitvista Syaphira.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KPf670Im1Ft9O7hLoyD3v4xCOmHs1hR
"""

!pip install streamlit pyngrok

"""# **Web Scrapping**"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

# Nilai tukar USD ke IDR
usd_to_idr = 15000

# List untuk simpan semua data
data_rentals = []

# Scrape beberapa halaman
for page in range(1, 7):
    if page == 1:
        url = "https://www.bukitvista.com/search-results"
    else:
        url = f"https://www.bukitvista.com/search-results/page/{page}"

    headers = {'User-Agent': 'Mozilla/5.0'}
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        print(f"Gagal mengakses halaman {url}")
        continue

    soup = BeautifulSoup(response.text, 'html.parser')
    rentals = soup.find_all('div', class_='item-body flex-grow-1')

    for content in rentals:
        try:
            name = content.find('h2', class_='item-title').text.strip()
            location = content.find('address', class_='item-address').text.strip()
            bedrooms = content.find('li', class_='h-beds').text.strip() if content.find('li', class_='h-beds') else 'N/A'
            bathrooms = content.find('li', class_='h-baths').text.strip() if content.find('li', class_='h-baths') else 'N/A'
            property_type = content.find('li', class_='h-type').text.strip() if content.find('li', class_='h-type') else 'N/A'
            price_text = content.find('ul', class_='item-price-wrap hide-on-list').text.strip() if content.find('ul', class_='item-price-wrap hide-on-list') else 'N/A'
            agency = content.find('div', class_='item-author').text.strip() if content.find('div', class_='item-author') else 'N/A'

            url_element = content.find('a', attrs={'target': '_self'})
            property_url = url_element['href'] if url_element and 'href' in url_element.attrs else 'N/A'

            # --- Proses Harga ---
            price_lower = price_text.lower()

            # 1. Ambil angka harga mentah
            match_price = re.search(r'[\$|usd\s]?([\d.,]+)', price_lower)
            raw_price_number = float(match_price.group(1).replace(',', '').replace('.', '').strip()) if match_price else 0

            # 2. Cek periode
            if 'per month' in price_lower or '/month' in price_lower:
                period_days = 30
            elif 'per night' in price_lower or '/night' in price_lower or 'per malam' in price_lower:
                period_days = 1
            elif '2 nights' in price_lower:
                period_days = 2
            else:
                period_days = 30  # default

            # 3. Hitung harga per hari
            price_per_day_usd = None
            price_per_day_idr = None

            if '$' in price_lower or 'usd' in price_lower:
                price_per_day_usd = raw_price_number / period_days
                price_per_day_idr = price_per_day_usd * usd_to_idr
            else:
                price_per_day_idr = raw_price_number / period_days

            # Format hasil harga
            formatted_price_usd = f"${price_per_day_usd:,.2f}" if price_per_day_usd else 'N/A'
            formatted_price_idr = f"Rp {price_per_day_idr:,.0f}" if price_per_day_idr else 'N/A'

            # Bersihkan teks "beds:" dan "baths:"
            bedrooms = re.sub(r'\b(beds):\s*', '', bedrooms, flags=re.IGNORECASE).strip()
            bathrooms = re.sub(r'\b(baths):\s*', '', bathrooms, flags=re.IGNORECASE).strip()

            # Simpan ke list
            data_rentals.append({
                'name': name,
                'location': location,
                'bedrooms': bedrooms,
                'bathrooms': bathrooms,
                'property_type': property_type,
                'price_text': price_text,
                'raw_price_number': raw_price_number,
                'period_days': period_days,
                'price_per_day_usd': formatted_price_usd,
                'price_per_day_idr': formatted_price_idr,
                'url': property_url,
                'agency': agency
            })

        except AttributeError:
            continue

# Bangun DataFrame dari hasil scraping
df_rentals = pd.DataFrame(data_rentals)

# Tampilkan semua kolom
pd.set_option('display.max_columns', None)

df_rentals

"""# **Cleaning Data**"""

import re
import numpy as np

# 1. Bersihkan kolom bedrooms dan bathrooms dari label seperti 'Bed:', 'Bath:'
def clean_room_info(text):
    if isinstance(text, str):
        text = re.sub(r'\b(Bed|Beds|Bath|Baths):\s*', '', text, flags=re.IGNORECASE)
    try:
        return int(re.search(r'\d+', str(text)).group())
    except:
        return np.nan

df_rentals['bedrooms'] = df_rentals['bedrooms'].apply(clean_room_info)
df_rentals['bathrooms'] = df_rentals['bathrooms'].apply(clean_room_info)

# 2. Bersihkan dan konversi kolom price_per_day_usd
df_rentals['price_per_day_usd'] = df_rentals['price_per_day_usd'].replace('N/A', np.nan)
df_rentals['price_per_day_usd'] = df_rentals['price_per_day_usd'].replace('[\$,]', '', regex=True).astype(float)

# 3. Bersihkan dan konversi kolom price_per_day_idr
df_rentals['price_per_day_idr'] = df_rentals['price_per_day_idr'].replace('N/A', np.nan)
df_rentals['price_per_day_idr'] = df_rentals['price_per_day_idr'].replace('[Rp\s,]', '', regex=True).astype(float)

# 4. Format tampilan kolom IDR agar tidak pakai notasi ilmiah dan tanpa Rp
df_rentals['price_per_day_idr'] = df_rentals['price_per_day_idr'].apply(
    lambda x: f"{int(x):,}" if pd.notnull(x) else 'N/A'
)

df_rentals

from google.colab import drive
drive.mount('/content/drive')

# Path lengkap dengan nama file .csv
output_path = '/content/drive/MyDrive/Scraped Data Bukitvista/data_rentals_bukitvista.csv'

# Simpan DataFrame ke CSV
df_rentals.to_csv(output_path, index=False, encoding='utf-8-sig')
print(f"Data berhasil disimpan ke: {output_path}")

# Simpan ke file CSV
df_rentals.to_csv('data_rentals_bukitvista.csv', index=False, encoding='utf-8-sig')
print("Data berhasil disimpan ke 'data_rentals_bukitvista.csv'")

"""# **Streamlit**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import numpy as np
# import re
# import matplotlib.pyplot as plt
# 
# # Load data
# @st.cache_data
# def load_data():
#     return pd.read_csv("/content/data_rentals_bukitvista.csv")
# 
# df = load_data()
# 
# # Membersihkan nilai kamar tidur dan kamar mandi
# def clean_room_info(value):
#     try:
#         return int(re.search(r'\d+', str(value)).group())
#     except:
#         return np.nan
# 
# df['bedrooms'] = df['bedrooms'].apply(clean_room_info)
# df['bathrooms'] = df['bathrooms'].apply(clean_room_info)
# 
# # Tab navigasi
# tab1, tab2 = st.tabs(["📊 EDA Properti", "🏠 Rekomendasi Properti"])
# 
# # Tab EDA
# with tab1:
#     st.title("📊 EDA Properti Sewa")
# 
#     st.subheader("Preview Data")
#     st.dataframe(df.head())
# 
#     st.subheader("Statistik Deskriptif")
#     st.write(df[['bedrooms', 'bathrooms', 'price_per_day_usd', 'price_per_day_idr']].describe())
# 
#     st.subheader("Distribusi Harga per Malam (USD)")
#     fig, ax = plt.subplots()
#     df['price_per_day_usd'].dropna().plot(kind='hist', bins=30, edgecolor='black', ax=ax)
#     ax.set_xlabel("Harga per Malam (USD)")
#     st.pyplot(fig)
# 
#     st.subheader("Filter Jumlah Kamar Tidur")
#     bedroom_filter = st.slider("Jumlah kamar tidur minimum", 0, int(df['bedrooms'].max()), 1)
#     filtered_df = df[df['bedrooms'] >= bedroom_filter]
#     st.write(f"{len(filtered_df)} properti ditemukan dengan >= {bedroom_filter} kamar tidur.")
#     st.dataframe(filtered_df[['name', 'location', 'bedrooms', 'bathrooms', 'price_per_day_usd']])
# 
# # Tab Rekomendasi
# with tab2:
#     st.title("🏠 Rekomendasi Properti Sewa")
# 
#     st.sidebar.header("🎯 Filter Preferensi Anda")
#     lokasi_unik = df['location'].dropna().unique()
#     if len(lokasi_unik) == 0:
#         st.warning("Data lokasi belum tersedia.")
#     else:
#         selected_location = st.sidebar.selectbox("Pilih Lokasi", sorted(lokasi_unik))
#         max_budget = st.sidebar.number_input("Anggaran Maksimum per Malam (USD)", min_value=0, value=100)
# 
#         rekomendasi_df = df[
#             (df['location'] == selected_location) &
#             (df['price_per_day_usd'] <= max_budget)
#         ]
# 
#         st.subheader(f"Properti di {selected_location} dengan harga <= ${max_budget}")
#         if not rekomendasi_df.empty:
#             st.dataframe(rekomendasi_df[['name', 'location', 'bedrooms', 'bathrooms', 'price_per_day_usd']])
#         else:
#             st.warning("Tidak ada properti yang sesuai dengan kriteria Anda.")